// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// template_mail.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _template_mailHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5f\x6e\xe3\xb6\x13\x7e\xcf\x29\x26\xfa\xe1\xf7\xb6\x32\xe5\x4d\x82\x4d\xbc\xb2\x81\x36\xc9\x36\x45\x93\x66\x91\x78\xb7\xdd\xa7\x82\x92\xc6\x12\x11\x4a\x54\xc9\x91\xff\x34\xc8\x11\x8a\x9e\xa0\xe8\x4b\x0f\x51\xa0\xb7\xe9\x05\xda\x23\x14\x94\x64\x45\xb6\x65\x27\x29\x50\x94\x0f\xb1\xa8\xe1\xf7\x7d\x33\xe3\xe1\x8c\xe3\xef\x9f\x5d\x9f\x8e\x3f\xbd\x3f\x87\x84\x52\x09\xef\x3f\x7c\x7e\xf9\xe5\x29\x38\x2e\x63\xdf\x1c\x9c\x32\x76\x36\x3e\x83\x6f\x2f\xc6\x57\x97\xd0\xef\x79\x30\xd6\x3c\x33\x82\x84\xca\xb8\x64\xec\xfc\x6b\x67\x0f\xea\xe5\x24\x44\xf9\x80\xb1\xd9\x6c\xd6\x9b\x1d\xf4\x94\x8e\xd9\xf8\x86\xcd\x2d\x67\xdf\x92\xd4\x8f\x2e\xb5\x18\x7a\x11\x45\xce\x68\xcf\x2f\x85\xe7\xa9\xcc\xcc\xb0\x83\xa6\x7f\x72\x72\x52\xa1\xcb\xb3\xc8\xa3\x51\xa9\xea\xa7\x48\x1c\x32\x9e\xe2\xd0\x99\x0a\x9c\xe5\x4a\x93\x03\xa1\xca\x08\x33\x1a\x3a\x33\x11\x51\x32\x8c\x70\x2a\x42\x74\xcb\x8d\xc3\xda\x40\x2b\xe4\xe2\xf7\x85\x98\x0e\x9d\xd3\x0a\xe4\x8e\x17\x39\xb6\x28\x08\xe7\xc4\xac\xf0\x5b\x08\x13\xae\x0d\xd2\xf0\xc3\xf8\x9d\x7b\xdc\x10\x91\x20\x89\xa3\xeb\x8f\x17\xf0\xd9\xe5\xf9\xcd\xd8\x67\xd5\x8b\xca\x68\x68\x21\x11\x68\x91\x63\xcd\x14\x1a\xe3\x8c\x9a\x84\x05\x2a\x5a\xc0\x7d\xb3\xb5\x2b\xe5\x3a\x16\xd9\x00\x3c\xe0\x05\xa9\xb7\x2b\xb6\x9c\x47\x91\xc8\xe2\x01\x78\xab\xef\x53\x91\x55\xd1\x0d\xa0\xef\x79\xff\x5f\x35\x4e\x54\x46\xee\x84\xa7\x42\x2e\x06\x60\x78\x66\x5c\x83\x5a\x4c\x56\x0f\x05\x3c\xbc\x8b\xb5\x2a\xb2\xc8\x0d\x95\x54\x7a\x00\xff\xf3\xbc\x93\xa3\xe3\x37\x8f\xc7\x1e\xf6\x9a\x47\xe2\x81\xc4\x2d\x7e\x1f\x79\xf9\x1c\xbc\xfa\xe3\x49\x91\x77\xe5\xea\x16\x49\x5e\x01\x45\x6b\x2a\x4d\x06\x8e\xf2\x79\x27\xaa\x67\x6b\x03\xf5\x1a\x2c\x41\x11\x27\x34\x80\x43\xaf\x0d\x2b\x55\x70\x4e\x2e\x97\x22\xce\x06\x10\x62\x46\xa8\x3b\xec\x65\xbd\x4e\x94\x4e\x07\x50\xe4\x39\xea\x90\x1b\xec\x48\xb2\x11\x3f\xe0\x00\x5e\x1f\xae\x6b\x94\xc6\x59\xed\x42\xa0\x64\xd4\xed\x79\x5d\x72\x5b\x5c\xef\x7b\x1b\xbe\xb7\x44\xfb\xc7\xeb\x46\x29\x32\x74\x97\xe0\x03\x6f\x5b\xba\x62\x45\x6a\x8b\xe2\x9b\x17\x25\xab\x4d\x1a\x14\x44\x2a\x5b\xa3\x7d\x2a\xd3\x3b\xa3\x79\x56\x11\xef\xc8\x33\xac\xdc\x9e\x32\x1f\xf5\xc7\xce\x08\xf8\x5a\x0c\xdb\xca\xb6\x89\x2f\xc2\x50\x69\x6e\x3b\xdb\x00\x32\x95\xe1\x2e\xf6\x99\xe6\xb6\x98\x5e\x70\xff\x5f\x76\x4b\x7b\x13\xa5\x68\x83\xff\x99\x05\xfd\xd4\xb7\xb5\xfd\x46\xb5\xbf\xc7\xc3\x6d\xf9\xad\x5d\xdb\x96\x5f\xaf\x5c\x2f\xca\xef\xa3\xb4\x6d\xb9\xd6\xaa\x53\x2e\x37\xd4\x7d\x56\xda\x47\x7b\x3e\xab\xa6\x88\x6f\x7b\xf0\x68\xcf\xaf\x7a\x5a\x35\x30\x1c\xdb\x45\x1d\x08\x94\x8e\x50\x0f\x1d\xcf\x81\x10\xa5\x34\x39\x0f\x45\x16\x37\xfb\xba\x9e\xec\x7e\x39\x0a\x34\x84\x92\x1b\x3b\xc1\xca\x2e\xd4\xea\xf4\x3e\x45\x50\x2a\x0f\x9d\xa6\x0e\xcb\xdc\xb5\xce\x94\xe7\x92\x7e\x35\x4b\x24\x6a\xf2\x59\xd2\x6f\x51\x30\x5a\x4e\x3d\x46\x7a\x43\xb2\x6e\x1f\xbb\x35\xfb\x5d\x92\xf9\xea\xde\xae\x0b\x94\x52\xbd\x02\x3f\xd0\x6c\x54\xfe\xd9\x38\x31\x4e\x10\x0c\xea\x29\x6a\xf0\x83\xd1\xfd\x3d\xf4\xec\x14\x86\x87\x07\xb0\xcf\x09\xd7\xd1\x8c\x6b\xbb\xf7\x59\x30\x82\x85\x2a\xc0\x6e\xa5\x52\x77\x22\x8b\x61\xa2\x34\x08\x03\x61\xa1\x35\x66\x24\x17\x1b\xf4\x35\xa7\x21\x4e\x85\x59\xb2\xec\xef\x72\xe8\xb6\xc8\x73\xdb\x1d\x6a\x24\x9f\x72\x21\x79\x20\xa4\xa0\xc5\x12\xdf\x0d\xbc\xc1\xb8\xac\xa7\x1a\xa8\xcb\xed\x6e\xc8\x19\x27\x5e\xdd\x8a\x06\x16\x35\xaf\x9e\x80\x22\x61\x48\x18\x01\xa7\x36\x16\x49\xa4\xb8\x82\xec\x86\x9f\x26\x88\xda\xc0\x3e\xfc\xf5\xcb\x8f\xbf\x77\x48\xf8\x2c\x7f\x76\xc5\xd8\xde\xff\x44\x89\xbe\xae\x1a\xa5\x07\xde\x46\xd5\x54\x17\xe6\xf9\x77\x64\xa9\xba\xd2\xfc\x9c\xcd\x08\xfd\xa5\xa7\x9b\x86\x68\x95\xc3\xa9\xbb\xd0\xd0\x39\x3c\xea\x20\x6a\x70\x1c\x12\x8d\x93\xea\x67\xa5\xa9\x7f\x57\xde\x89\xd4\x14\x13\xd1\x0b\x55\xea\x00\x71\x1d\x23\x0d\x9d\xef\x02\xc9\xb3\x3b\x67\xf4\x55\x65\xf4\x19\xdf\xe2\x49\x93\xd7\x7f\xd5\x47\xa3\x16\xaa\x30\xc4\x35\x75\xbb\x79\xab\x3e\xa9\xe2\xd6\xda\xff\x6b\x4f\xd5\x34\xe9\x76\xf1\xfa\xe3\xc5\x0b\x7d\x7b\xac\xd4\xd6\x1b\x5b\x6a\xcf\x2e\xeb\x6a\xb6\xfc\x93\xde\xbb\x1e\x5a\x2c\x28\x29\x02\x1b\x19\xbb\x5a\x44\x4a\xa5\x2c\x56\xae\x9a\x26\x6e\xab\xb9\x08\x34\x9b\x61\x5f\xf1\xc8\xce\x12\x4a\xe0\x8f\x9f\x7f\xfd\xf3\xb7\x9f\xe0\x0b\x41\x17\x45\xb0\x92\x8a\xf5\x28\x9a\x30\x7d\x56\x8f\xa4\xf2\xdf\x8e\xd1\xdf\x01\x00\x00\xff\xff\xbe\x06\xcb\x12\x9c\x0d\x00\x00")

func template_mailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_template_mailHtml,
		"template_mail.html",
	)
}

func template_mailHtml() (*asset, error) {
	bytes, err := template_mailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template_mail.html", size: 3484, mode: os.FileMode(420), modTime: time.Unix(1539187817, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template_mail.html": template_mailHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template_mail.html": &bintree{template_mailHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

